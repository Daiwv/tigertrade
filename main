from bittrex import Bittrex
bitty = Bittrex(None, None)
from time import sleep
import json


def usdt_btc_l():
    """This function returns the long average price of BTC in USDT"""
    return(avg_mkt_p("USDT-BTC", 100))

def usdt_btc_s():
    """This function returns the short average price of BTC in USDT"""
    return(avg_mkt_p("USDT-BTC", 5))

def avg_mkt_p(mkt, count=20):
    """
    This function returns the avg price of any market currency over the last (count) trades
    Price will be in the preceding currency given in the mkt argument ("ETH-LTC" will return a price in ETH)

    count: the number of most recent trades to average
    mkt: string determining market ("USDT-BTC", "BTC-VTC")
    """
    clist = bitty.get_market_history(mkt, count)['result']
    plist = []
    for c in clist:
        plist.append(c['Price'])
    total = 0
    for p in plist:
        total += p

    return(total/len(plist))

def mkt_p_usd(mkt, count=20):
    """
    This function returns the price in USD of any BTC-tradable currency over the last (count) trades

    mkt: string determining market ("USDT-BTC", "BTC-VTC")
    """
    avg = avg_mkt_p(mkt, count)
    btcp = (avg_mkt_p("USDT-BTC", count))
    return (avg * btcp)

def write_mkt_hist(mkt, count):
    """
    This function [will maybe in the future be] responsible for writing to the market history file, it will compile a .csv to track market values
    :param mkt: the market file to write to
    :param count: how many transactions in the past we want to keep
    :return:
    """

    tList = bitty.get_market_history(mkt, count)['result']
    fiList, fpList, fqList, ftList, foList = [], [], [], [], []
    tiList, tpList, tqList, ttList,toList = [], [], [], [], []
    for c in tList:
        tiList.append((c["Id"]))
        tpList.append((c["Price"]))
        tqList.append((c["Quantity"]))
        toList.append((c["OrderType"]))
        ttList.append((c["TimeStamp"]))
    #print(cList)
    with open(mkt + "data.csv", 'a') as f:
        pass
    with open(mkt + "data.csv", 'r') as f:
        fList = []
        tLine = []
        for line in f:
            tLine= f.readline()
            print(line)
            if fList == []:
                print("none")
        #print(tLine)
        if tLine == None:
            with open(mkt + "data.csv", 'w') as f:
                for t in tList:
                    f.write(str(t))
                    f.write("\n")
            """
            else:
                #print(fList)
                i=0
                for l in fList:
                    fList[i] = l[:-1]
                    fList[i] = int(fList[i])
                    i+=1
        
                for t in tList:
        
                    if t in fList:
                        pass
                    else:
                        with open(mkt + "data.csv", 'a') as f:
                            f.write(str(t))
                            f.write("\n")
"""

def build_mkt_hist(mkt, count=20):
    while True:
        write_mkt_json(mkt, count)
        sleep(10)

def wrt_mkt_json(mkt, count=20):
    mList = bitty.get_market_history(mkt, count)['result']
    try:
        with open(mkt + "data.json", "r") as f:
            file_raw = f.readlines()
            #file_list = json.dumps(file_raw)
            for m in mList:
                if m["Id"] in file_raw["Id"]:
                    pass
            #Sfor m in mList:

    except FileNotFoundError:
        with open(mkt + "data.json", "w") as f:
            json.dump(mList, f)

def main():
    #print("VTC: $", mkt_p_usd("BTC-VTC"))
    #print("XVG: $", mkt_p_usd("BTC-XVG", 50))
    #print(usdt_btc_l())
    #print(usdt_btc_s())
    #build_mkt_hist("BTC-ETH", 100)
    wrt_mkt_json("BTC-ETH", 50)


if __name__ == "__main__":
    main()
from bittrex import Bittrex
bitty = Bittrex(None, None)

def usdt_btc_l():
    """This function returns the long average price of BTC in USDT"""
    return(avg_mkt_p("USDT-BTC", 100))

def usdt_btc_s():
    """This function returns the short average price of BTC in USDT"""
    return(avg_mkt_p("USDT-BTC", 5))

def avg_mkt_p(mkt, count=20):
    """
    This function returns the avg price of any market currency over the last (count) trades
    Price will be in the preceding currency given in the mkt argument ("ETH-LTC" will return a price in ETH)

    count: the number of most recent trades to average
    mkt: string determining market ("USDT-BTC", "BTC-VTC")
    """
    clist = bitty.get_market_history(mkt, count)['result']
    plist = []
    for c in clist:
        plist.append(c['Price'])
    total = 0
    for p in plist:
        total += p

    return(total/len(plist))

def mkt_p_usd(mkt, count=20):
    """
    This function returns the price in USD of any BTC-tradable currency over the last (count) trades

    mkt: string determining market ("USDT-BTC", "BTC-VTC")
    """
    avg = avg_mkt_p(mkt, count)
    btcp = (avg_mkt_p("USDT-BTC", count))
    return (avg * btcp)

def write_mkt_hist(mkt, count):
    """
    This function is responsible for writing to the market history file, it will compile a .csv to track market values
    :param mkt: the market file to write to
    :param count: how many transactions in the past we want to keep
    :return:
    """

    cList = bitty.get_market_history(mkt, count)['result']
    tList= []
    for c in cList:
        tList.append(c["TimeStamp"])
    #print(cList)
    with open(mkt + "data.csv", 'a') as f:
        pass
    with open(mkt + "data.csv", 'r') as f:
        fList=f.readlines()
        if len(fList) < count:
            with open(mkt + "data.csv", 'a') as f:
                for t in tList:
                    f.write(t)
                    f.write("\n")
        else:
            for f in fList:
                f = f.strip('\n')
                for t in tList:
                    if t in fList == true:
                        print("save me")
                    else:
                        pass
                        #with open(mkt + "data.csv", 'a') as f:
                        #    for t in tList:
                        #        f.write(t)
                        #        f.write("\n")

def main():
    print("VTC: $", mkt_p_usd("BTC-VTC"))
    #print("XVG: $", mkt_p_usd("BTC-XVG", 50))
    #print(usdt_btc_l())
    #print(usdt_btc_s())
    write_mkt_hist("BTC-AUR",20)


if __name__ == "__main__":
    main()
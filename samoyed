from itertools import cycle
from bittrex import Bittrex
mybittrex = Bittrex('', '')

initialBalance=1
ccycler = cycle(['BTC', 'ETH'])
curr1, curr2 = next(ccycler), next(ccycler)

#list of ETH- markets
currencylist = ['LTC', 'DASH', 'XMR', 'DGB', 'BTS', 'XRP', 'XEM', 'XLM', 'FCT', 'DGD', 'WAVES', 'ETC', 'STRAT', 'SNGLS', 'REP', 'NEO', 'ZEC', 'TIME', 'GNT', 'LGD', 'TRST', 'WINGS', 'RLC', 'GNO', 'GUP', 'LUN', 'TKN', 'HMQ', 'ANT', 'BAT', '1ST', 'QRL', 'CRB', 'PTOY', 'MYST', 'CFI', 'BNT', 'NMR', 'SNT', 'MCO', 'ADT', 'FUN', 'PAY', 'MTL', 'STORJ', 'ADX', 'OMG', 'CVC', 'QTUM', 'BCC']

'''
#dynamically retrieve ETH tradable currencies......takes forever.
def getList():
    print("Retrieving exchange list", end='')
    currencies = mybittrex.get_currencies()['result']
    for c in currencies:
        if (mybittrex.get_market_history(eth + "-" + c['Currency']))['success']:
            currencyList.append(c['Currency'])
            print(".", end='', sep='', flush=True)
        else:
            pass
    print("\nExchange list retrieved:")
    print(currencyList)
'''

def run():
    getBalance()
    check()

#retrieves balance information from account
def getBalance():
    initialBalance = mybittrex.get_balance(curr1)['result']['Balance']
    print("Starting funds:", initialBalance, curr1, "(~ $", format(initialBalance*getValue('USDT', curr1), ".2f"), ")\n")

#gets most recent rate from market history
def getValue(s, t):
    market = s + "-" + t
    return mybittrex.get_market_history(market)['result'][0]['Price']

def check():
    global initialBalance
    currencyIterator = iter(currencylist)
    coin = currencyIterator.__next__()
    while 1:
        det = calculation(curr1, coin, curr2)
        try:
            coin = currencyIterator.__next__()
        except StopIteration:
            det = calculation(curr1, curr2)
            break

def calculation(*args):
    global initialBalance
    global ethflag
    argIter = iter(args)
    arg1, arg2 = argIter.__next__(), argIter.__next__()
    testInitialBalance = round(.9975*initialBalance , 8)
    print("Initial balance:", testInitialBalance, arg1)
    testAltBalance = round(.9975*testInitialBalance/getValue(arg1, arg2), 8)
    print("Resulting", arg2, "balance:", testAltBalance)
    try:
        arg3=argIter.__next__()
        testFinalBalance = round(testAltBalance*getValue(arg3, arg2), 8)
        print("Resulting", arg3, "balance:", testFinalBalance)
        diff = (testFinalBalance*getValue('USDT', arg3))/(testInitialBalance*getValue('USDT', arg1))
    except StopIteration:
        diff = (testAltBalance*getValue('USDT', arg2))/(testInitialBalance*getValue('USDT', arg1))
    print("Result is", 100*diff, "% of initial balance.")
    if diff>1:
        market = arg1 + '-' + arg2
        print("First transaction...")
        if (mybittrex.buy_limit(market, testInitialBalance/getValue(arg1, arg2), getValue(arg1, arg2))['success'] == 1):
            while mybittrex.get_open_orders()['result']:
                pass
            print("Complete.")
            try:
                market2 = arg3 + '-' + arg2
                print("Second transaction...")
                if (mybittrex.sell_limit(market2, .9975*mybittrex.get_balance(arg2)['result']['Balance']*getValue(arg3, arg2), getValue(arg3, arg2)['success'] == 1)):
                    while mybittrex.get_open_orders()['result']:
                        pass
                    print("Complete.")
                else:
                    print("Funds in", arg2, "cannot complete transaction.")
                    exit()
                print("Transactions complete.")
            except Exception:
                print("Transaction complete.")
            switch()
            setUp()
        else:
            print("Funds in", arg1, "cannot complete transaction.")
            exit()
        return 1
    else:
        print("Transaction(s) passed.\n")
        return 0

def setUp():
    global initialBalance
    initialBalance = mybittrex.get_balance(curr1)['result']['Balance']

def switch():
    global curr1, curr2
    curr1 = curr2
    curr2 = next(ccycler)

run()
